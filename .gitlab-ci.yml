image: docker:19.03.10

# Static Application Security Tests by Gitlab CI
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  # When using dind service, we need to instruct docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket.
  DOCKER_HOST: tcp://docker:2376
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  # If you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  # These are usually specified by the entrypoint, however the
  # Kubernetes executor doesn't run entrypoints
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4125
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  WEBSITE_STAGING: https://staging-dot-nodal-figure-301713.ew.r.appspot.com

stages:
  - build
  - test
  - staging
  # Optional step to run tests agains staged deployment.
  - staging-test
  - deploy

services:
  - docker:19.03.10-dind

before_script:
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27384
  - sleep 5
  # Disabled because python:3.8 image doesn't have docker -> fails
  # - docker info 

 
build-job:
  stage: build
  script:
    - echo "This builds something"

# Shameless code reuse from https://stackoverflow.com/a/47342642
pylint:
  stage: test
  image: python:3.8
  before_script:
    - pip install pylint pylint-exit anybadge
  script:
    - mkdir ./pylint
    - pylint --output-format=text main.py | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - ./pylint/

test-job1:
  stage: test
  image: python:3.8
  script:
    - export PYTHONPATH=.
    - export FLASK_APP=web
    - pip install --no-cache-dir -r requirements.txt
    - pip install pytest pytest-cov
    - pytest --cov --cov-report term --cov-report html -m "not staging"
  artifacts:
    paths:
      - htmlcov/

# Deploy code coverage report of the master branch to GitLab Pages
pages:
  stage: deploy
  dependencies:
    - test-job1
  script:
    - mv htmlcov/ public/
  artifacts:
    paths:
      - public
    expire_in: 10 days
  only:
    - master

staging:
  stage: staging
  environment:
    name: staging
  image: google/cloud-sdk:alpine
  script:
  - echo $SERVICE_ACCOUNT > /tmp/$CI_PIPELINE_ID.json
  - echo $GOOGLE_APPLICATION_CREDENTIALS > appcredentials.json
  - gcloud auth activate-service-account --key-file /tmp/$CI_PIPELINE_ID.json
  - mkdir instance
  - cp $INSTANCE_CONFIG_PRODUCTION instance/instance_config.py
  - gcloud --quiet --project $PROJECT_ID app deploy app-staging.yaml
  - rm /tmp/$CI_PIPELINE_ID.json
  only:
    - master

staging-test:
  stage: staging-test
  image: python:3.8
  script:
    - pip install pytest
    # Run tests that has been marked by "@pytest.mark.staging"
    - pytest --verbose tests -m "staging"

deploy:
  stage: deploy
  environment:
    name: production
  image: google/cloud-sdk:alpine
  script:
  - echo $SERVICE_ACCOUNT > /tmp/$CI_PIPELINE_ID.json
  - echo $GOOGLE_APPLICATION_CREDENTIALS > appcredentials.json
  - gcloud auth activate-service-account --key-file /tmp/$CI_PIPELINE_ID.json
  - mkdir instance
  - cp $INSTANCE_CONFIG_PRODUCTION instance/instance_config.py
  - gcloud --quiet --project $PROJECT_ID app deploy app.yaml
  - rm /tmp/$CI_PIPELINE_ID.json
  
  only:
    - master